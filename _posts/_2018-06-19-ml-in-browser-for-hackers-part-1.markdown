---
layout: post
title:  "Predicting Earthquake magnitude using Linear Regression in TensorFlow.js - Machine Learning in the Browser for Hackers (Part 1)"
date:   2018-06-19 18:31:00 +0300
categories: ["machine-learning"]
excerpt: It is time to learn about value functions, the Bellman equation, and Q-learning. You will use all that knowledge to build an MDP and train your agent using Python. Ready to get that ice cream?
---

# What are we trying to do?

How can we predict the strength of Earthquake?

# What is Linear Regression?

Simple Linear Regression is one of the most basic models you can try out. This model operates under the assumption that there is a linear relationship between a variable $Y$ and an independent variable $X$. Here's the equation that describes the model:

$$Y = aX + b$$

What $a$ - "slope" and $b$ - "intercept" are parameters for our model. And TensorFlow.js is going to help us find their values. That is, find values that best describe our data. Want to see what the process looks like? Here is a picture:

{:.center}
![png](https://cdn-images-1.medium.com/max/1600/1*eeIvlwkMNG1wSmj3FR6M2g.gif)
*Source: [Towards Data Science](https://towardsdatascience.com/linear-regression-the-easier-way-6f941aa471ea)*

What you're observing is the process of fitting the straight line through an example dataset. You can see that the line (that is, the model) starts at some crappy position and after some training (indicated by the increasing number of iterations) it is right in the middle of our data. Note that there are points that are far away from our line. Is this an issue? That's a topic for another discussion.

But what is Linear Regression? We only learned about Simple Linear Regression so far. Linear Regression (or Multiple Linear Regression) has two or more independent variables (think $X$s). That's all folks!

Okay, we have a plan, let's try to create a Linear Regression model that can predict the Earthquake magnitude in Richter scale. For that, we're going to need a powerful tool.

# What is TensorFlow.js

> A JavaScript library for training and deploying ML models in the browser and on Node.js

[TensorFlow.js](https://js.tensorflow.org/) makes it super easy to get started with Machine Learning. But why? 

1) No need to know any of the fancy pantsy languages like C++, Python or Java, just JavaScript. But hey you probably know some already! 

2) Do you know where you can run JavaScript? That's right pretty much everywhere - phones, tablets, PCs, Macs and your grandma bike (just checking if you're still with me). The best part is that you don't need to install anything - simply include a JavaScript file. And yes, you guessed it, that means you can train your models on Android and iOS phones too (PyTorch I am looking at you)!

## Installing TensorFlow.js

Installing TensorFlow.js is simple. Being a JavaScript library, we have to include it in the `<head>` tag of an HTML page. Open up your favorite text editor (as long it is VIM) and create the following HTML file:

```html
<!DOCTYPE html>
<html>
    <head>
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.11.6"></script>
        <script src="index.js"></script>
    </head>

    <body>
    </body>
</html>
```

At the time of this writing, the most recent version of TensorFlow.js is [*0.11.6*](https://github.com/tensorflow/tfjs/releases/tag/v0.11.6). If a newer version is available, when you read these lines, you should consider updating it and fiddling with it if nothing works.

All of our JavaScript is going to be written in `index.js`. Now might be a good time to create it.

### Example: Predicting the next Fibonacci number

If you don't know what a Fibonacci number is (shame on you!) you can [take a look here](https://en.wikipedia.org/wiki/Fibonacci_number).

Simply put, the next Fibonacci number is generated by summing the previous two (after the first two). Here are the first couple of numbers:

$ 1, 1, 2, 3, 5, 8, 13, 21 \ldots$

Can you build a model using TensorFlow.js that predicts the next Fibonacci number?

#### What is a Tensor?

Tensors are just multidimensional arrays of numbers. They're the main building block you're going to use when building models in TensorFlow (still wondering about the name of the library?). When performing operations, on them, you get new Tensors (that is, they are immutable). Creating a Tensor is easy:

```javascript
const myFirstTensor = tf.scalar(42)
```

Here is how we can create a vector (1d Tensor):

```javascript
const oneDimTensor = tf.tensor1d([1, 2, 3])
```

Depending on your needs you can use other helper functions to create Tensors: `tf.tensor2d()`, `tf.tensor3d()` and `tf.tensor4d()`.

# Predicting Eathquake magnitude

## The data

## Loading the data

## Building our model

## Training

## Results

# Conclusion

We're just getting started. In the next part we're going to see what Neural Networks are and how we can use on in TensorFlow.js
